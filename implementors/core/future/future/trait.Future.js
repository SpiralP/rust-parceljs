(function() {var implementors = {};
implementors["actix_http"] = [{"text":"impl Future for Response","synthetic":false,"types":[]},{"text":"impl Future for ResponseBuilder","synthetic":false,"types":[]},{"text":"impl&lt;T, S, B, X, U&gt; Future for Dispatcher&lt;T, S, B, X, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Service&lt;Request = Request&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Error: Into&lt;Error&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Response: Into&lt;Response&lt;B&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: MessageBody,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Service&lt;Request = Request, Response = Request&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Error: Into&lt;Error&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Service&lt;Request = (Request, Framed&lt;T, Codec&gt;), Response = ()&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;U::Error: Display,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, B&gt; Future for SendResponse&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: MessageBody,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, S, B&gt; Future for Dispatcher&lt;T, S, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Service&lt;Request = Request&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Error: Into&lt;Error&gt; + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Future: 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Response: Into&lt;Response&lt;B&gt;&gt; + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: MessageBody + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Future for Dispatcher&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Service&lt;Request = Frame, Response = Message&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Future: 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Error: 'static,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["actix_server"] = [{"text":"impl Future for ServerBuilder","synthetic":false,"types":[]},{"text":"impl Future for Server","synthetic":false,"types":[]}];
implementors["actix_threadpool"] = [{"text":"impl&lt;I, E:&nbsp;Debug&gt; Future for CpuFuture&lt;I, E&gt;","synthetic":false,"types":[]}];
implementors["actix_utils"] = [{"text":"impl Future for Waiter","synthetic":false,"types":[]},{"text":"impl&lt;S, T, U&gt; Future for Dispatcher&lt;S, T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Service&lt;Request = &lt;U as Decoder&gt;::Item, Response = &lt;U as Encoder&gt;::Item&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Error: 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Future: 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Decoder + Encoder,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Encoder&gt;::Item: 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Encoder&gt;::Error: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Decoder&gt;::Error: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Future for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Future for PReceiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Future for Dispatcher&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Service&lt;Request = S::Item, Response = ()&gt; + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Future for TimeoutServiceResponse&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Service,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["actix_web"] = [{"text":"impl&lt;U&gt; Future for UrlEncoded&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: DeserializeOwned + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;U&gt; Future for JsonBody&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: DeserializeOwned + 'static,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["awc"] = [{"text":"impl&lt;S&gt; Future for MessageBody&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Stream&lt;Item = Result&lt;Bytes, PayloadError&gt;&gt; + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, U&gt; Future for JsonBody&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Stream&lt;Item = Result&lt;Bytes, PayloadError&gt;&gt; + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: DeserializeOwned,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Future for SendClientRequest","synthetic":false,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T, '_&gt; Future for Cancellation&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Future for Receiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["futures_task"] = [{"text":"impl&lt;T, '_&gt; Future for LocalFutureObj&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, '_&gt; Future for FutureObj&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["h2"] = [{"text":"impl&lt;B&gt; Future for ReadySendRequest&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Buf + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, B&gt; Future for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Buf + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Future for ResponseFuture","synthetic":false,"types":[]},{"text":"impl Future for PushedResponseFuture","synthetic":false,"types":[]},{"text":"impl&lt;T, B:&nbsp;Buf&gt; Future for Handshake&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Buf + 'static,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["http_body"] = [{"text":"impl&lt;'a, T:&nbsp;Body + Unpin + ?Sized&gt; Future for Data&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Body + Unpin + ?Sized&gt; Future for Trailers&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["hyper"] = [{"text":"impl&lt;T, B&gt; Future for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Unpin + Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: HttpBody + Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;B::Data: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B::Error: Into&lt;Box&lt;dyn StdError + Send + Sync&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Future for ResponseFuture","synthetic":false,"types":[]},{"text":"impl Future for GaiFuture","synthetic":false,"types":[]},{"text":"impl Future for ResponseFuture","synthetic":false,"types":[]},{"text":"impl&lt;I, B, S, E&gt; Future for Connection&lt;I, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: HttpService&lt;Body, ResBody = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Error: Into&lt;Box&lt;dyn StdError + Send + Sync&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: AsyncRead + AsyncWrite + Unpin + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: HttpBody + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;B::Error: Into&lt;Box&lt;dyn StdError + Send + Sync&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: H2Exec&lt;S::Future, B&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I, F, S, FE, E, B&gt; Future for Connecting&lt;I, F, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: AsyncRead + AsyncWrite + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Future&lt;Output = Result&lt;S, FE&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: HttpService&lt;Body, ResBody = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: HttpBody + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;B::Error: Into&lt;Box&lt;dyn StdError + Send + Sync&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: H2Exec&lt;S::Future, B&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I, IO, IE, S, B, E&gt; Future for Server&lt;I, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Accept&lt;Conn = IO, Error = IE&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;IE: Into&lt;Box&lt;dyn StdError + Send + Sync&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: AsyncRead + AsyncWrite + Unpin + Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: MakeServiceRef&lt;IO, Body, ResBody = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Error: Into&lt;Box&lt;dyn StdError + Send + Sync&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: HttpBody + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;B::Error: Into&lt;Box&lt;dyn StdError + Send + Sync&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: H2Exec&lt;&lt;S::Service as HttpService&lt;Body&gt;&gt;::Future, B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: NewSvcExec&lt;IO, S::Future, S::Service, E, NoopWatcher&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Future for OnUpgrade","synthetic":false,"types":[]}];
implementors["tokio"] = [{"text":"impl&lt;S:&nbsp;?Sized, '_&gt; Future for Seek&lt;'_, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: AsyncSeek + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized, W:&nbsp;?Sized, '_&gt; Future for Copy&lt;'_, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsyncRead + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: AsyncWrite + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Future for JoinHandle&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Future for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Future for LocalSet","synthetic":false,"types":[]},{"text":"impl Future for Delay","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Future for Timeout&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Future,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["tracing_futures"] = [{"text":"impl&lt;T:&nbsp;Future&gt; Future for Instrumented&lt;T&gt;","synthetic":false,"types":[]}];
implementors["trust_dns_proto"] = [{"text":"impl&lt;S&gt; Future for TcpClientConnect&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Future for UdpResponse","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Send + Unpin, MF:&nbsp;MessageFinalizer&gt; Future for UdpClientConnect&lt;S, MF&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S, R&gt; Future for DnsExchange&lt;S, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DnsRequestSender&lt;DnsResponseFuture = R&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Future&lt;Output = Result&lt;DnsResponse, ProtoError&gt;&gt; + 'static + Send + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F, S, R&gt; Future for DnsExchangeConnect&lt;F, S, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Future&lt;Output = Result&lt;S, ProtoError&gt;&gt; + 'static + Send + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DnsRequestSender&lt;DnsResponseFuture = R&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Future&lt;Output = Result&lt;DnsResponse, ProtoError&gt;&gt; + 'static + Send + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F, S, MF&gt; Future for DnsMultiplexerConnect&lt;F, S, MF&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Future&lt;Output = Result&lt;S, ProtoError&gt;&gt; + Send + Unpin + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DnsClientStream + Unpin + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;MF: MessageFinalizer + Send + Sync + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Future for DnsMultiplexerSerialResponse","synthetic":false,"types":[]},{"text":"impl&lt;F&gt; Future for OneshotDnsResponseReceiver&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Future&lt;Output = Result&lt;DnsResponse, ProtoError&gt;&gt; + Send + Unpin,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["trust_dns_resolver"] = [{"text":"impl&lt;F, G&gt; Future for Background&lt;F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Future + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Future + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;Either&lt;AndThen&lt;MapErr&lt;Receiver&lt;F&gt;, fn(_: Canceled) -&gt; ResolveError&gt;, G, fn(_: F) -&gt; G&gt;, Ready&lt;G::Output&gt;&gt;: Future&lt;Output = G::Output&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Future for SrvLookupFuture","synthetic":false,"types":[]},{"text":"impl Future for ReverseLookupFuture","synthetic":false,"types":[]},{"text":"impl Future for Ipv4LookupFuture","synthetic":false,"types":[]},{"text":"impl Future for Ipv6LookupFuture","synthetic":false,"types":[]},{"text":"impl Future for MxLookupFuture","synthetic":false,"types":[]},{"text":"impl Future for TxtLookupFuture","synthetic":false,"types":[]},{"text":"impl Future for SoaLookupFuture","synthetic":false,"types":[]},{"text":"impl Future for NsLookupFuture","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;DnsHandle + Sync + 'static&gt; Future for LookupIpFuture&lt;C&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()